#!/usr/bin/env rspec

# Copyright (c) [2021] SUSE LLC
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, contact SUSE LLC.
#
# To contact SUSE LLC about this file by physical or electronic mail, you may
# find current contact information at www.suse.com.

require_relative "../spec_helper"

require "y2storage/dialogs/issues"

describe Y2Storage::Dialogs::Issues do
  subject { described_class }

  before do
    allow(Yast::UI).to receive(:OpenDialog).and_return(true)
    allow(Yast::UI).to receive(:SetFocus)
    allow(Yast::UI).to receive(:CloseDialog)
    allow(Yast::UI).to receive(:UserInput).and_return(:cancel)
  end

  let(:issues) { Y2Issues::List.new }

  describe ".show" do
    it "shows a table of issues" do
      expect(Yast::UI).to receive(:OpenDialog) do |_opts, content|
        table = content.nested_find do |w|
          w.is_a?(Yast::Term) &&
            w.value == :Table &&
            w.params.any? { |p| p.value == :id && p.params.first == "issues" }
        end

        expect(table).to_not be_nil
      end

      subject.show(issues)
    end

    it "shows the details of the issue" do
      expect(Yast::UI).to receive(:OpenDialog) do |_opts, content|
        details = content.nested_find do |w|
          w.is_a?(Yast::Term) &&
            w.value == :RichText &&
            w.params.any? { |p| p.value == :id && p.params.first == "issues-details" }
        end

        expect(details).to_not be_nil
      end

      subject.show(issues)
    end

    context "when a footer is given" do
      it "shows the footer" do
        expect(Yast::UI).to receive(:OpenDialog) do |_opts, content|
          footer = content.nested_find do |w|
            w.is_a?(Yast::Term) &&
              w.value == :Label &&
              w.params.first.match?(/Continue/)
          end

          expect(footer).to_not be_nil
        end

        subject.show(issues, footer: "Continue?")
      end
    end

    context "when a message is given" do
      it "shows the message" do
        expect(Yast::UI).to receive(:OpenDialog) do |_opts, content|
          message = content.nested_find do |w|
            w.is_a?(Yast::Term) &&
              w.value == :Label &&
              w.params.first.match?(/List of issues/)
          end

          expect(message).to_not be_nil
        end

        subject.show(issues, message: "List of issues")
      end
    end
  end

  describe ".handle_event" do
    let(:params) { [event, nil, nil, nil] }

    context "when the event is generated by the table of issues" do
      let(:event) { "issues" }

      it "delegates the event handling to the issues widget" do
        expect(subject.issues_widget).to receive(:handle_event)

        subject.handle_event(*params)
      end
    end

    context "when the event is not generated by the table of issues" do
      let(:event) { "other-widget" }

      it "does not delegate the event handling to the issues widget" do
        expect(subject.issues_widget).to_not receive(:handle_event)

        subject.handle_event(*params)
      end
    end
  end
end
