#!/usr/bin/env rspec

# Copyright (c) [2021] SUSE LLC
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, contact SUSE LLC.
#
# To contact SUSE LLC about this file by physical or electronic mail, you may
# find current contact information at www.suse.com

require_relative "../test_helper"

require "cwm/rspec"
require "y2partitioner/dialogs/probing_issues"

describe Y2Partitioner::Dialogs::ProbingIssues do
  subject { described_class.new }

  before { devicegraph_stub(scenario) }

  let(:scenario) { "lvm-two-vgs" }

  let(:device_graph) { Y2Partitioner::DeviceGraphs.instance.current }

  include_examples "CWM::Dialog"

  describe "#contents" do
    it "contains an issues widget" do
      widget = subject.contents.nested_find do |i|
        i.is_a?(Y2Partitioner::Dialogs::ProbingIssues::IssuesWidget)
      end

      expect(widget).to_not be_nil
    end
  end

  describe Y2Partitioner::Dialogs::ProbingIssues::IssuesWidget do
    subject { described_class.new }

    include_examples "CWM::CustomWidget"

    let(:storage_issues_widget) { Y2Storage::Widgets::Issues.new(id: "issues_test") }

    before do
      allow(Y2Storage::Widgets::Issues).to receive(:new).and_return(storage_issues_widget)
      allow(storage_issues_widget).to receive(:handle_event)
    end

    describe "#contents" do
      it "displays the Y2Storage::Widgets::Issues content" do
        contents = subject.contents

        table = contents.nested_find do |w|
          w.is_a?(Yast::Term) &&
            w.value == :Table &&
            w.params.any? { |p| p.value == :id && p.params.first == "issues_test" }
        end

        details = contents.nested_find do |w|
          w.is_a?(Yast::Term) &&
            w.value == :RichText &&
            w.params.any? { |p| p.value == :id && p.params.first == "issues_test-details" }
        end

        expect(table).to_not be_nil
        expect(details).to_not be_nil
      end
    end

    describe "#handle" do
      let(:event) { { "ID" => event_id } }

      context "when the event is generated by the internal issues widget" do
        let(:event_id) { storage_issues_widget.id }

        it "delegates the event to the issues widget" do
          expect(storage_issues_widget).to receive(:handle_event)

          subject.handle(event)
        end

        it "returns nil" do
          expect(subject.handle(event)).to be_nil
        end
      end

      context "when the event is not generated by the internal issues widget" do
        let(:event_id) { "unknown_widget" }

        it "does not delegate the event to the issues widget" do
          expect(storage_issues_widget).to_not receive(:handle_event)

          subject.handle(event)
        end

        it "returns nil" do
          expect(subject.handle(event)).to be_nil
        end
      end
    end
  end
end
